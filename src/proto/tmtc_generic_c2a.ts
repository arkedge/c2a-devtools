// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "tmtc_generic_c2a.proto" (package "tmtc_generic_c2a", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message tmtc_generic_c2a.GetSatelliteSchemaRequest
 */
export interface GetSatelliteSchemaRequest {
}
/**
 * @generated from protobuf message tmtc_generic_c2a.GetSateliteSchemaResponse
 */
export interface GetSateliteSchemaResponse {
    /**
     * @generated from protobuf field: tmtc_generic_c2a.SatelliteSchema satellite_schema = 1;
     */
    satelliteSchema?: SatelliteSchema;
}
/**
 * @generated from protobuf message tmtc_generic_c2a.SatelliteSchema
 */
export interface SatelliteSchema {
    /**
     * @generated from protobuf field: map<string, tmtc_generic_c2a.TelemetryChannelSchema> telemetry_channels = 1;
     */
    telemetryChannels: {
        [key: string]: TelemetryChannelSchema;
    };
    /**
     * @generated from protobuf field: map<string, tmtc_generic_c2a.TelemetryComponentSchema> telemetry_components = 2;
     */
    telemetryComponents: {
        [key: string]: TelemetryComponentSchema;
    };
    /**
     * @generated from protobuf field: map<string, tmtc_generic_c2a.CommandPrefixSchema> command_prefixes = 3;
     */
    commandPrefixes: {
        [key: string]: CommandPrefixSchema;
    };
    /**
     * @generated from protobuf field: map<string, tmtc_generic_c2a.CommandComponentSchema> command_components = 4;
     */
    commandComponents: {
        [key: string]: CommandComponentSchema;
    };
}
/**
 * @generated from protobuf message tmtc_generic_c2a.TelemetryComponentSchema
 */
export interface TelemetryComponentSchema {
    /**
     * @generated from protobuf field: tmtc_generic_c2a.TelemetryComponentSchemaMetadata metadata = 1;
     */
    metadata?: TelemetryComponentSchemaMetadata;
    /**
     * @generated from protobuf field: map<string, tmtc_generic_c2a.TelemetrySchema> telemetries = 2;
     */
    telemetries: {
        [key: string]: TelemetrySchema;
    };
}
/**
 * @generated from protobuf message tmtc_generic_c2a.TelemetryComponentSchemaMetadata
 */
export interface TelemetryComponentSchemaMetadata {
    /**
     * @generated from protobuf field: uint32 apid = 1;
     */
    apid: number;
}
/**
 * @generated from protobuf message tmtc_generic_c2a.CommandComponentSchema
 */
export interface CommandComponentSchema {
    /**
     * @generated from protobuf field: tmtc_generic_c2a.CommandComponentSchemaMetadata metadata = 1;
     */
    metadata?: CommandComponentSchemaMetadata;
    /**
     * @generated from protobuf field: map<string, tmtc_generic_c2a.CommandSchema> commands = 2;
     */
    commands: {
        [key: string]: CommandSchema;
    };
}
/**
 * @generated from protobuf message tmtc_generic_c2a.CommandComponentSchemaMetadata
 */
export interface CommandComponentSchemaMetadata {
    /**
     * @generated from protobuf field: uint32 apid = 1;
     */
    apid: number;
}
/**
 * @generated from protobuf message tmtc_generic_c2a.CommandSchema
 */
export interface CommandSchema {
    /**
     * @generated from protobuf field: tmtc_generic_c2a.CommandSchemaMetadata metadata = 1;
     */
    metadata?: CommandSchemaMetadata;
    /**
     * @generated from protobuf field: repeated tmtc_generic_c2a.CommandParameterSchema parameters = 2;
     */
    parameters: CommandParameterSchema[];
}
/**
 * @generated from protobuf message tmtc_generic_c2a.CommandSchemaMetadata
 */
export interface CommandSchemaMetadata {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message tmtc_generic_c2a.CommandParameterSchema
 */
export interface CommandParameterSchema {
    /**
     * @generated from protobuf field: tmtc_generic_c2a.CommandParameterSchemaMetadata metadata = 1;
     */
    metadata?: CommandParameterSchemaMetadata;
    /**
     * @generated from protobuf field: tmtc_generic_c2a.CommandParameterDataType data_type = 2;
     */
    dataType: CommandParameterDataType;
}
/**
 * TODO: string description = 1;
 *
 * @generated from protobuf message tmtc_generic_c2a.CommandParameterSchemaMetadata
 */
export interface CommandParameterSchemaMetadata {
}
/**
 * @generated from protobuf message tmtc_generic_c2a.TelemetrySchema
 */
export interface TelemetrySchema {
    /**
     * @generated from protobuf field: tmtc_generic_c2a.TelemetrySchemaMetadata metadata = 1;
     */
    metadata?: TelemetrySchemaMetadata;
    /**
     * @generated from protobuf field: repeated tmtc_generic_c2a.TelemetryFieldSchema fields = 2;
     */
    fields: TelemetryFieldSchema[];
}
/**
 * @generated from protobuf message tmtc_generic_c2a.TelemetrySchemaMetadata
 */
export interface TelemetrySchemaMetadata {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message tmtc_generic_c2a.TelemetryFieldSchema
 */
export interface TelemetryFieldSchema {
    /**
     * @generated from protobuf field: tmtc_generic_c2a.TelemetryFieldSchemaMetadata metadata = 1;
     */
    metadata?: TelemetryFieldSchemaMetadata;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // TODO: TelemetryFieldDataType data_type = 3;
}
/**
 * TODO: string description = 1;
 *
 * @generated from protobuf message tmtc_generic_c2a.TelemetryFieldSchemaMetadata
 */
export interface TelemetryFieldSchemaMetadata {
}
/**
 * @generated from protobuf message tmtc_generic_c2a.TelemetryChannelSchema
 */
export interface TelemetryChannelSchema {
    /**
     * @generated from protobuf field: tmtc_generic_c2a.TelemetryChannelSchemaMetadata metadata = 1;
     */
    metadata?: TelemetryChannelSchemaMetadata;
}
/**
 * @generated from protobuf message tmtc_generic_c2a.TelemetryChannelSchemaMetadata
 */
export interface TelemetryChannelSchemaMetadata {
    /**
     * @generated from protobuf field: uint32 destination_flag_mask = 1;
     */
    destinationFlagMask: number;
}
/**
 * @generated from protobuf message tmtc_generic_c2a.CommandPrefixSchema
 */
export interface CommandPrefixSchema {
    /**
     * @generated from protobuf field: tmtc_generic_c2a.CommandPrefixSchemaMetadata metadata = 1;
     */
    metadata?: CommandPrefixSchemaMetadata;
    /**
     * @generated from protobuf field: map<string, tmtc_generic_c2a.CommandSubsystemSchema> subsystems = 2;
     */
    subsystems: {
        [key: string]: CommandSubsystemSchema;
    };
}
/**
 * @generated from protobuf message tmtc_generic_c2a.CommandPrefixSchemaMetadata
 */
export interface CommandPrefixSchemaMetadata {
}
/**
 * @generated from protobuf message tmtc_generic_c2a.CommandSubsystemSchema
 */
export interface CommandSubsystemSchema {
    /**
     * @generated from protobuf field: tmtc_generic_c2a.CommandSubsystemSchemaMetadata metadata = 1;
     */
    metadata?: CommandSubsystemSchemaMetadata;
    /**
     * @generated from protobuf field: bool has_time_indicator = 2;
     */
    hasTimeIndicator: boolean;
}
/**
 * @generated from protobuf message tmtc_generic_c2a.CommandSubsystemSchemaMetadata
 */
export interface CommandSubsystemSchemaMetadata {
    /**
     * @generated from protobuf field: uint32 destination_type = 1;
     */
    destinationType: number;
    /**
     * @generated from protobuf field: uint32 execution_type = 2;
     */
    executionType: number;
}
/**
 * @generated from protobuf enum tmtc_generic_c2a.CommandParameterDataType
 */
export enum CommandParameterDataType {
    /**
     * @generated from protobuf enum value: CMD_PARAMETER_INTEGER = 0;
     */
    CMD_PARAMETER_INTEGER = 0,
    /**
     * @generated from protobuf enum value: CMD_PARAMETER_DOUBLE = 1;
     */
    CMD_PARAMETER_DOUBLE = 1,
    /**
     * @generated from protobuf enum value: CMD_PARAMETER_BYTES = 2;
     */
    CMD_PARAMETER_BYTES = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class GetSatelliteSchemaRequest$Type extends MessageType<GetSatelliteSchemaRequest> {
    constructor() {
        super("tmtc_generic_c2a.GetSatelliteSchemaRequest", []);
    }
    create(value?: PartialMessage<GetSatelliteSchemaRequest>): GetSatelliteSchemaRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSatelliteSchemaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSatelliteSchemaRequest): GetSatelliteSchemaRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetSatelliteSchemaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.GetSatelliteSchemaRequest
 */
export const GetSatelliteSchemaRequest = new GetSatelliteSchemaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSateliteSchemaResponse$Type extends MessageType<GetSateliteSchemaResponse> {
    constructor() {
        super("tmtc_generic_c2a.GetSateliteSchemaResponse", [
            { no: 1, name: "satellite_schema", kind: "message", T: () => SatelliteSchema }
        ]);
    }
    create(value?: PartialMessage<GetSateliteSchemaResponse>): GetSateliteSchemaResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSateliteSchemaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSateliteSchemaResponse): GetSateliteSchemaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tmtc_generic_c2a.SatelliteSchema satellite_schema */ 1:
                    message.satelliteSchema = SatelliteSchema.internalBinaryRead(reader, reader.uint32(), options, message.satelliteSchema);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSateliteSchemaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tmtc_generic_c2a.SatelliteSchema satellite_schema = 1; */
        if (message.satelliteSchema)
            SatelliteSchema.internalBinaryWrite(message.satelliteSchema, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.GetSateliteSchemaResponse
 */
export const GetSateliteSchemaResponse = new GetSateliteSchemaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SatelliteSchema$Type extends MessageType<SatelliteSchema> {
    constructor() {
        super("tmtc_generic_c2a.SatelliteSchema", [
            { no: 1, name: "telemetry_channels", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => TelemetryChannelSchema } },
            { no: 2, name: "telemetry_components", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => TelemetryComponentSchema } },
            { no: 3, name: "command_prefixes", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => CommandPrefixSchema } },
            { no: 4, name: "command_components", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => CommandComponentSchema } }
        ]);
    }
    create(value?: PartialMessage<SatelliteSchema>): SatelliteSchema {
        const message = { telemetryChannels: {}, telemetryComponents: {}, commandPrefixes: {}, commandComponents: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SatelliteSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SatelliteSchema): SatelliteSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, tmtc_generic_c2a.TelemetryChannelSchema> telemetry_channels */ 1:
                    this.binaryReadMap1(message.telemetryChannels, reader, options);
                    break;
                case /* map<string, tmtc_generic_c2a.TelemetryComponentSchema> telemetry_components */ 2:
                    this.binaryReadMap2(message.telemetryComponents, reader, options);
                    break;
                case /* map<string, tmtc_generic_c2a.CommandPrefixSchema> command_prefixes */ 3:
                    this.binaryReadMap3(message.commandPrefixes, reader, options);
                    break;
                case /* map<string, tmtc_generic_c2a.CommandComponentSchema> command_components */ 4:
                    this.binaryReadMap4(message.commandComponents, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: SatelliteSchema["telemetryChannels"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SatelliteSchema["telemetryChannels"] | undefined, val: SatelliteSchema["telemetryChannels"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = TelemetryChannelSchema.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tmtc_generic_c2a.SatelliteSchema.telemetry_channels");
            }
        }
        map[key ?? ""] = val ?? TelemetryChannelSchema.create();
    }
    private binaryReadMap2(map: SatelliteSchema["telemetryComponents"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SatelliteSchema["telemetryComponents"] | undefined, val: SatelliteSchema["telemetryComponents"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = TelemetryComponentSchema.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tmtc_generic_c2a.SatelliteSchema.telemetry_components");
            }
        }
        map[key ?? ""] = val ?? TelemetryComponentSchema.create();
    }
    private binaryReadMap3(map: SatelliteSchema["commandPrefixes"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SatelliteSchema["commandPrefixes"] | undefined, val: SatelliteSchema["commandPrefixes"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = CommandPrefixSchema.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tmtc_generic_c2a.SatelliteSchema.command_prefixes");
            }
        }
        map[key ?? ""] = val ?? CommandPrefixSchema.create();
    }
    private binaryReadMap4(map: SatelliteSchema["commandComponents"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SatelliteSchema["commandComponents"] | undefined, val: SatelliteSchema["commandComponents"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = CommandComponentSchema.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tmtc_generic_c2a.SatelliteSchema.command_components");
            }
        }
        map[key ?? ""] = val ?? CommandComponentSchema.create();
    }
    internalBinaryWrite(message: SatelliteSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, tmtc_generic_c2a.TelemetryChannelSchema> telemetry_channels = 1; */
        for (let k of Object.keys(message.telemetryChannels)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            TelemetryChannelSchema.internalBinaryWrite(message.telemetryChannels[k], writer, options);
            writer.join().join();
        }
        /* map<string, tmtc_generic_c2a.TelemetryComponentSchema> telemetry_components = 2; */
        for (let k of Object.keys(message.telemetryComponents)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            TelemetryComponentSchema.internalBinaryWrite(message.telemetryComponents[k], writer, options);
            writer.join().join();
        }
        /* map<string, tmtc_generic_c2a.CommandPrefixSchema> command_prefixes = 3; */
        for (let k of Object.keys(message.commandPrefixes)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            CommandPrefixSchema.internalBinaryWrite(message.commandPrefixes[k], writer, options);
            writer.join().join();
        }
        /* map<string, tmtc_generic_c2a.CommandComponentSchema> command_components = 4; */
        for (let k of Object.keys(message.commandComponents)) {
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            CommandComponentSchema.internalBinaryWrite(message.commandComponents[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.SatelliteSchema
 */
export const SatelliteSchema = new SatelliteSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TelemetryComponentSchema$Type extends MessageType<TelemetryComponentSchema> {
    constructor() {
        super("tmtc_generic_c2a.TelemetryComponentSchema", [
            { no: 1, name: "metadata", kind: "message", T: () => TelemetryComponentSchemaMetadata },
            { no: 2, name: "telemetries", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => TelemetrySchema } }
        ]);
    }
    create(value?: PartialMessage<TelemetryComponentSchema>): TelemetryComponentSchema {
        const message = { telemetries: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TelemetryComponentSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TelemetryComponentSchema): TelemetryComponentSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tmtc_generic_c2a.TelemetryComponentSchemaMetadata metadata */ 1:
                    message.metadata = TelemetryComponentSchemaMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* map<string, tmtc_generic_c2a.TelemetrySchema> telemetries */ 2:
                    this.binaryReadMap2(message.telemetries, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: TelemetryComponentSchema["telemetries"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TelemetryComponentSchema["telemetries"] | undefined, val: TelemetryComponentSchema["telemetries"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = TelemetrySchema.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tmtc_generic_c2a.TelemetryComponentSchema.telemetries");
            }
        }
        map[key ?? ""] = val ?? TelemetrySchema.create();
    }
    internalBinaryWrite(message: TelemetryComponentSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tmtc_generic_c2a.TelemetryComponentSchemaMetadata metadata = 1; */
        if (message.metadata)
            TelemetryComponentSchemaMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, tmtc_generic_c2a.TelemetrySchema> telemetries = 2; */
        for (let k of Object.keys(message.telemetries)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            TelemetrySchema.internalBinaryWrite(message.telemetries[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.TelemetryComponentSchema
 */
export const TelemetryComponentSchema = new TelemetryComponentSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TelemetryComponentSchemaMetadata$Type extends MessageType<TelemetryComponentSchemaMetadata> {
    constructor() {
        super("tmtc_generic_c2a.TelemetryComponentSchemaMetadata", [
            { no: 1, name: "apid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TelemetryComponentSchemaMetadata>): TelemetryComponentSchemaMetadata {
        const message = { apid: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TelemetryComponentSchemaMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TelemetryComponentSchemaMetadata): TelemetryComponentSchemaMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 apid */ 1:
                    message.apid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TelemetryComponentSchemaMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 apid = 1; */
        if (message.apid !== 0)
            writer.tag(1, WireType.Varint).uint32(message.apid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.TelemetryComponentSchemaMetadata
 */
export const TelemetryComponentSchemaMetadata = new TelemetryComponentSchemaMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandComponentSchema$Type extends MessageType<CommandComponentSchema> {
    constructor() {
        super("tmtc_generic_c2a.CommandComponentSchema", [
            { no: 1, name: "metadata", kind: "message", T: () => CommandComponentSchemaMetadata },
            { no: 2, name: "commands", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => CommandSchema } }
        ]);
    }
    create(value?: PartialMessage<CommandComponentSchema>): CommandComponentSchema {
        const message = { commands: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandComponentSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandComponentSchema): CommandComponentSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tmtc_generic_c2a.CommandComponentSchemaMetadata metadata */ 1:
                    message.metadata = CommandComponentSchemaMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* map<string, tmtc_generic_c2a.CommandSchema> commands */ 2:
                    this.binaryReadMap2(message.commands, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: CommandComponentSchema["commands"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CommandComponentSchema["commands"] | undefined, val: CommandComponentSchema["commands"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = CommandSchema.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tmtc_generic_c2a.CommandComponentSchema.commands");
            }
        }
        map[key ?? ""] = val ?? CommandSchema.create();
    }
    internalBinaryWrite(message: CommandComponentSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tmtc_generic_c2a.CommandComponentSchemaMetadata metadata = 1; */
        if (message.metadata)
            CommandComponentSchemaMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, tmtc_generic_c2a.CommandSchema> commands = 2; */
        for (let k of Object.keys(message.commands)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            CommandSchema.internalBinaryWrite(message.commands[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.CommandComponentSchema
 */
export const CommandComponentSchema = new CommandComponentSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandComponentSchemaMetadata$Type extends MessageType<CommandComponentSchemaMetadata> {
    constructor() {
        super("tmtc_generic_c2a.CommandComponentSchemaMetadata", [
            { no: 1, name: "apid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CommandComponentSchemaMetadata>): CommandComponentSchemaMetadata {
        const message = { apid: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandComponentSchemaMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandComponentSchemaMetadata): CommandComponentSchemaMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 apid */ 1:
                    message.apid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandComponentSchemaMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 apid = 1; */
        if (message.apid !== 0)
            writer.tag(1, WireType.Varint).uint32(message.apid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.CommandComponentSchemaMetadata
 */
export const CommandComponentSchemaMetadata = new CommandComponentSchemaMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandSchema$Type extends MessageType<CommandSchema> {
    constructor() {
        super("tmtc_generic_c2a.CommandSchema", [
            { no: 1, name: "metadata", kind: "message", T: () => CommandSchemaMetadata },
            { no: 2, name: "parameters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CommandParameterSchema }
        ]);
    }
    create(value?: PartialMessage<CommandSchema>): CommandSchema {
        const message = { parameters: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandSchema): CommandSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tmtc_generic_c2a.CommandSchemaMetadata metadata */ 1:
                    message.metadata = CommandSchemaMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* repeated tmtc_generic_c2a.CommandParameterSchema parameters */ 2:
                    message.parameters.push(CommandParameterSchema.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tmtc_generic_c2a.CommandSchemaMetadata metadata = 1; */
        if (message.metadata)
            CommandSchemaMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated tmtc_generic_c2a.CommandParameterSchema parameters = 2; */
        for (let i = 0; i < message.parameters.length; i++)
            CommandParameterSchema.internalBinaryWrite(message.parameters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.CommandSchema
 */
export const CommandSchema = new CommandSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandSchemaMetadata$Type extends MessageType<CommandSchemaMetadata> {
    constructor() {
        super("tmtc_generic_c2a.CommandSchemaMetadata", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CommandSchemaMetadata>): CommandSchemaMetadata {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandSchemaMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandSchemaMetadata): CommandSchemaMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandSchemaMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.CommandSchemaMetadata
 */
export const CommandSchemaMetadata = new CommandSchemaMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandParameterSchema$Type extends MessageType<CommandParameterSchema> {
    constructor() {
        super("tmtc_generic_c2a.CommandParameterSchema", [
            { no: 1, name: "metadata", kind: "message", T: () => CommandParameterSchemaMetadata },
            { no: 2, name: "data_type", kind: "enum", T: () => ["tmtc_generic_c2a.CommandParameterDataType", CommandParameterDataType] }
        ]);
    }
    create(value?: PartialMessage<CommandParameterSchema>): CommandParameterSchema {
        const message = { dataType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandParameterSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandParameterSchema): CommandParameterSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tmtc_generic_c2a.CommandParameterSchemaMetadata metadata */ 1:
                    message.metadata = CommandParameterSchemaMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* tmtc_generic_c2a.CommandParameterDataType data_type */ 2:
                    message.dataType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandParameterSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tmtc_generic_c2a.CommandParameterSchemaMetadata metadata = 1; */
        if (message.metadata)
            CommandParameterSchemaMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tmtc_generic_c2a.CommandParameterDataType data_type = 2; */
        if (message.dataType !== 0)
            writer.tag(2, WireType.Varint).int32(message.dataType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.CommandParameterSchema
 */
export const CommandParameterSchema = new CommandParameterSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandParameterSchemaMetadata$Type extends MessageType<CommandParameterSchemaMetadata> {
    constructor() {
        super("tmtc_generic_c2a.CommandParameterSchemaMetadata", []);
    }
    create(value?: PartialMessage<CommandParameterSchemaMetadata>): CommandParameterSchemaMetadata {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandParameterSchemaMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandParameterSchemaMetadata): CommandParameterSchemaMetadata {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CommandParameterSchemaMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.CommandParameterSchemaMetadata
 */
export const CommandParameterSchemaMetadata = new CommandParameterSchemaMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TelemetrySchema$Type extends MessageType<TelemetrySchema> {
    constructor() {
        super("tmtc_generic_c2a.TelemetrySchema", [
            { no: 1, name: "metadata", kind: "message", T: () => TelemetrySchemaMetadata },
            { no: 2, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TelemetryFieldSchema }
        ]);
    }
    create(value?: PartialMessage<TelemetrySchema>): TelemetrySchema {
        const message = { fields: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TelemetrySchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TelemetrySchema): TelemetrySchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tmtc_generic_c2a.TelemetrySchemaMetadata metadata */ 1:
                    message.metadata = TelemetrySchemaMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* repeated tmtc_generic_c2a.TelemetryFieldSchema fields */ 2:
                    message.fields.push(TelemetryFieldSchema.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TelemetrySchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tmtc_generic_c2a.TelemetrySchemaMetadata metadata = 1; */
        if (message.metadata)
            TelemetrySchemaMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated tmtc_generic_c2a.TelemetryFieldSchema fields = 2; */
        for (let i = 0; i < message.fields.length; i++)
            TelemetryFieldSchema.internalBinaryWrite(message.fields[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.TelemetrySchema
 */
export const TelemetrySchema = new TelemetrySchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TelemetrySchemaMetadata$Type extends MessageType<TelemetrySchemaMetadata> {
    constructor() {
        super("tmtc_generic_c2a.TelemetrySchemaMetadata", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TelemetrySchemaMetadata>): TelemetrySchemaMetadata {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TelemetrySchemaMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TelemetrySchemaMetadata): TelemetrySchemaMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TelemetrySchemaMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.TelemetrySchemaMetadata
 */
export const TelemetrySchemaMetadata = new TelemetrySchemaMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TelemetryFieldSchema$Type extends MessageType<TelemetryFieldSchema> {
    constructor() {
        super("tmtc_generic_c2a.TelemetryFieldSchema", [
            { no: 1, name: "metadata", kind: "message", T: () => TelemetryFieldSchemaMetadata },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TelemetryFieldSchema>): TelemetryFieldSchema {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TelemetryFieldSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TelemetryFieldSchema): TelemetryFieldSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tmtc_generic_c2a.TelemetryFieldSchemaMetadata metadata */ 1:
                    message.metadata = TelemetryFieldSchemaMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TelemetryFieldSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tmtc_generic_c2a.TelemetryFieldSchemaMetadata metadata = 1; */
        if (message.metadata)
            TelemetryFieldSchemaMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.TelemetryFieldSchema
 */
export const TelemetryFieldSchema = new TelemetryFieldSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TelemetryFieldSchemaMetadata$Type extends MessageType<TelemetryFieldSchemaMetadata> {
    constructor() {
        super("tmtc_generic_c2a.TelemetryFieldSchemaMetadata", []);
    }
    create(value?: PartialMessage<TelemetryFieldSchemaMetadata>): TelemetryFieldSchemaMetadata {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TelemetryFieldSchemaMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TelemetryFieldSchemaMetadata): TelemetryFieldSchemaMetadata {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TelemetryFieldSchemaMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.TelemetryFieldSchemaMetadata
 */
export const TelemetryFieldSchemaMetadata = new TelemetryFieldSchemaMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TelemetryChannelSchema$Type extends MessageType<TelemetryChannelSchema> {
    constructor() {
        super("tmtc_generic_c2a.TelemetryChannelSchema", [
            { no: 1, name: "metadata", kind: "message", T: () => TelemetryChannelSchemaMetadata }
        ]);
    }
    create(value?: PartialMessage<TelemetryChannelSchema>): TelemetryChannelSchema {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TelemetryChannelSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TelemetryChannelSchema): TelemetryChannelSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tmtc_generic_c2a.TelemetryChannelSchemaMetadata metadata */ 1:
                    message.metadata = TelemetryChannelSchemaMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TelemetryChannelSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tmtc_generic_c2a.TelemetryChannelSchemaMetadata metadata = 1; */
        if (message.metadata)
            TelemetryChannelSchemaMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.TelemetryChannelSchema
 */
export const TelemetryChannelSchema = new TelemetryChannelSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TelemetryChannelSchemaMetadata$Type extends MessageType<TelemetryChannelSchemaMetadata> {
    constructor() {
        super("tmtc_generic_c2a.TelemetryChannelSchemaMetadata", [
            { no: 1, name: "destination_flag_mask", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TelemetryChannelSchemaMetadata>): TelemetryChannelSchemaMetadata {
        const message = { destinationFlagMask: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TelemetryChannelSchemaMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TelemetryChannelSchemaMetadata): TelemetryChannelSchemaMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 destination_flag_mask */ 1:
                    message.destinationFlagMask = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TelemetryChannelSchemaMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 destination_flag_mask = 1; */
        if (message.destinationFlagMask !== 0)
            writer.tag(1, WireType.Varint).uint32(message.destinationFlagMask);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.TelemetryChannelSchemaMetadata
 */
export const TelemetryChannelSchemaMetadata = new TelemetryChannelSchemaMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandPrefixSchema$Type extends MessageType<CommandPrefixSchema> {
    constructor() {
        super("tmtc_generic_c2a.CommandPrefixSchema", [
            { no: 1, name: "metadata", kind: "message", T: () => CommandPrefixSchemaMetadata },
            { no: 2, name: "subsystems", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => CommandSubsystemSchema } }
        ]);
    }
    create(value?: PartialMessage<CommandPrefixSchema>): CommandPrefixSchema {
        const message = { subsystems: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandPrefixSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandPrefixSchema): CommandPrefixSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tmtc_generic_c2a.CommandPrefixSchemaMetadata metadata */ 1:
                    message.metadata = CommandPrefixSchemaMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* map<string, tmtc_generic_c2a.CommandSubsystemSchema> subsystems */ 2:
                    this.binaryReadMap2(message.subsystems, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: CommandPrefixSchema["subsystems"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CommandPrefixSchema["subsystems"] | undefined, val: CommandPrefixSchema["subsystems"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = CommandSubsystemSchema.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tmtc_generic_c2a.CommandPrefixSchema.subsystems");
            }
        }
        map[key ?? ""] = val ?? CommandSubsystemSchema.create();
    }
    internalBinaryWrite(message: CommandPrefixSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tmtc_generic_c2a.CommandPrefixSchemaMetadata metadata = 1; */
        if (message.metadata)
            CommandPrefixSchemaMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, tmtc_generic_c2a.CommandSubsystemSchema> subsystems = 2; */
        for (let k of Object.keys(message.subsystems)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            CommandSubsystemSchema.internalBinaryWrite(message.subsystems[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.CommandPrefixSchema
 */
export const CommandPrefixSchema = new CommandPrefixSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandPrefixSchemaMetadata$Type extends MessageType<CommandPrefixSchemaMetadata> {
    constructor() {
        super("tmtc_generic_c2a.CommandPrefixSchemaMetadata", []);
    }
    create(value?: PartialMessage<CommandPrefixSchemaMetadata>): CommandPrefixSchemaMetadata {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandPrefixSchemaMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandPrefixSchemaMetadata): CommandPrefixSchemaMetadata {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CommandPrefixSchemaMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.CommandPrefixSchemaMetadata
 */
export const CommandPrefixSchemaMetadata = new CommandPrefixSchemaMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandSubsystemSchema$Type extends MessageType<CommandSubsystemSchema> {
    constructor() {
        super("tmtc_generic_c2a.CommandSubsystemSchema", [
            { no: 1, name: "metadata", kind: "message", T: () => CommandSubsystemSchemaMetadata },
            { no: 2, name: "has_time_indicator", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CommandSubsystemSchema>): CommandSubsystemSchema {
        const message = { hasTimeIndicator: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandSubsystemSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandSubsystemSchema): CommandSubsystemSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tmtc_generic_c2a.CommandSubsystemSchemaMetadata metadata */ 1:
                    message.metadata = CommandSubsystemSchemaMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* bool has_time_indicator */ 2:
                    message.hasTimeIndicator = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandSubsystemSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tmtc_generic_c2a.CommandSubsystemSchemaMetadata metadata = 1; */
        if (message.metadata)
            CommandSubsystemSchemaMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool has_time_indicator = 2; */
        if (message.hasTimeIndicator !== false)
            writer.tag(2, WireType.Varint).bool(message.hasTimeIndicator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.CommandSubsystemSchema
 */
export const CommandSubsystemSchema = new CommandSubsystemSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandSubsystemSchemaMetadata$Type extends MessageType<CommandSubsystemSchemaMetadata> {
    constructor() {
        super("tmtc_generic_c2a.CommandSubsystemSchemaMetadata", [
            { no: 1, name: "destination_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "execution_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CommandSubsystemSchemaMetadata>): CommandSubsystemSchemaMetadata {
        const message = { destinationType: 0, executionType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandSubsystemSchemaMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandSubsystemSchemaMetadata): CommandSubsystemSchemaMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 destination_type */ 1:
                    message.destinationType = reader.uint32();
                    break;
                case /* uint32 execution_type */ 2:
                    message.executionType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandSubsystemSchemaMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 destination_type = 1; */
        if (message.destinationType !== 0)
            writer.tag(1, WireType.Varint).uint32(message.destinationType);
        /* uint32 execution_type = 2; */
        if (message.executionType !== 0)
            writer.tag(2, WireType.Varint).uint32(message.executionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tmtc_generic_c2a.CommandSubsystemSchemaMetadata
 */
export const CommandSubsystemSchemaMetadata = new CommandSubsystemSchemaMetadata$Type();
/**
 * @generated ServiceType for protobuf service tmtc_generic_c2a.TmtcGenericC2a
 */
export const TmtcGenericC2a = new ServiceType("tmtc_generic_c2a.TmtcGenericC2a", [
    { name: "GetSatelliteSchema", options: {}, I: GetSatelliteSchemaRequest, O: GetSateliteSchemaResponse }
]);
