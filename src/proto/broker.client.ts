// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "broker.proto" (package "broker", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Broker } from "./broker";
import type { PostTelemetryResponse } from "./broker";
import type { PostTelemetryRequest } from "./broker";
import type { CommandStreamResponse } from "./broker";
import type { CommandStreamRequest } from "./broker";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { GetLastReceivedTelemetryResponse } from "./broker";
import type { GetLastReceivedTelemetryRequest } from "./broker";
import type { TelemetryStreamResponse } from "./broker";
import type { TelemetryStreamRequest } from "./broker";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PostCommandResponse } from "./broker";
import type { PostCommandRequest } from "./broker";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service broker.Broker
 */
export interface IBrokerClient {
    /**
     * @generated from protobuf rpc: PostCommand(broker.PostCommandRequest) returns (broker.PostCommandResponse);
     */
    postCommand(input: PostCommandRequest, options?: RpcOptions): UnaryCall<PostCommandRequest, PostCommandResponse>;
    /**
     * @generated from protobuf rpc: OpenTelemetryStream(broker.TelemetryStreamRequest) returns (stream broker.TelemetryStreamResponse);
     */
    openTelemetryStream(input: TelemetryStreamRequest, options?: RpcOptions): ServerStreamingCall<TelemetryStreamRequest, TelemetryStreamResponse>;
    /**
     * @generated from protobuf rpc: GetLastReceivedTelemetry(broker.GetLastReceivedTelemetryRequest) returns (broker.GetLastReceivedTelemetryResponse);
     */
    getLastReceivedTelemetry(input: GetLastReceivedTelemetryRequest, options?: RpcOptions): UnaryCall<GetLastReceivedTelemetryRequest, GetLastReceivedTelemetryResponse>;
    /**
     * @generated from protobuf rpc: OpenCommandStream(stream broker.CommandStreamRequest) returns (stream broker.CommandStreamResponse);
     */
    openCommandStream(options?: RpcOptions): DuplexStreamingCall<CommandStreamRequest, CommandStreamResponse>;
    /**
     * @generated from protobuf rpc: PostTelemetry(broker.PostTelemetryRequest) returns (broker.PostTelemetryResponse);
     */
    postTelemetry(input: PostTelemetryRequest, options?: RpcOptions): UnaryCall<PostTelemetryRequest, PostTelemetryResponse>;
}
/**
 * @generated from protobuf service broker.Broker
 */
export class BrokerClient implements IBrokerClient, ServiceInfo {
    typeName = Broker.typeName;
    methods = Broker.methods;
    options = Broker.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: PostCommand(broker.PostCommandRequest) returns (broker.PostCommandResponse);
     */
    postCommand(input: PostCommandRequest, options?: RpcOptions): UnaryCall<PostCommandRequest, PostCommandResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PostCommandRequest, PostCommandResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: OpenTelemetryStream(broker.TelemetryStreamRequest) returns (stream broker.TelemetryStreamResponse);
     */
    openTelemetryStream(input: TelemetryStreamRequest, options?: RpcOptions): ServerStreamingCall<TelemetryStreamRequest, TelemetryStreamResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<TelemetryStreamRequest, TelemetryStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetLastReceivedTelemetry(broker.GetLastReceivedTelemetryRequest) returns (broker.GetLastReceivedTelemetryResponse);
     */
    getLastReceivedTelemetry(input: GetLastReceivedTelemetryRequest, options?: RpcOptions): UnaryCall<GetLastReceivedTelemetryRequest, GetLastReceivedTelemetryResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetLastReceivedTelemetryRequest, GetLastReceivedTelemetryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: OpenCommandStream(stream broker.CommandStreamRequest) returns (stream broker.CommandStreamResponse);
     */
    openCommandStream(options?: RpcOptions): DuplexStreamingCall<CommandStreamRequest, CommandStreamResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CommandStreamRequest, CommandStreamResponse>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: PostTelemetry(broker.PostTelemetryRequest) returns (broker.PostTelemetryResponse);
     */
    postTelemetry(input: PostTelemetryRequest, options?: RpcOptions): UnaryCall<PostTelemetryRequest, PostTelemetryResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<PostTelemetryRequest, PostTelemetryResponse>("unary", this._transport, method, opt, input);
    }
}
