// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "tco_tmiv.proto" (package "tco_tmiv", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message tco_tmiv.Tco
 */
export interface Tco {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated tco_tmiv.TcoParam params = 2;
     */
    params: TcoParam[];
}
/**
 * @generated from protobuf message tco_tmiv.TcoParam
 */
export interface TcoParam {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "integer";
        /**
         * @generated from protobuf field: int64 integer = 2;
         */
        integer: bigint;
    } | {
        oneofKind: "double";
        /**
         * @generated from protobuf field: double double = 3;
         */
        double: number;
    } | {
        oneofKind: "bytes";
        /**
         * @generated from protobuf field: bytes bytes = 4;
         */
        bytes: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message tco_tmiv.Tmiv
 */
export interface Tmiv {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: uint64 plugin_received_time = 2;
     */
    pluginReceivedTime: bigint;
    /**
     * @generated from protobuf field: repeated tco_tmiv.TmivField fields = 3;
     */
    fields: TmivField[];
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 4;
     */
    timestamp?: Timestamp;
}
/**
 * @generated from protobuf message tco_tmiv.TmivField
 */
export interface TmivField {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "string";
        /**
         * @generated from protobuf field: string string = 2;
         */
        string: string;
    } | {
        oneofKind: "double";
        /**
         * @generated from protobuf field: double double = 3;
         */
        double: number;
    } | {
        oneofKind: "integer";
        /**
         * @generated from protobuf field: int64 integer = 4;
         */
        integer: bigint;
    } | {
        oneofKind: "enum";
        /**
         * @generated from protobuf field: string enum = 5;
         */
        enum: string;
    } | {
        oneofKind: "bytes";
        /**
         * @generated from protobuf field: bytes bytes = 6;
         */
        bytes: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Tco$Type extends MessageType<Tco> {
    constructor() {
        super("tco_tmiv.Tco", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TcoParam }
        ]);
    }
    create(value?: PartialMessage<Tco>): Tco {
        const message = { name: "", params: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Tco>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tco): Tco {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated tco_tmiv.TcoParam params */ 2:
                    message.params.push(TcoParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Tco, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated tco_tmiv.TcoParam params = 2; */
        for (let i = 0; i < message.params.length; i++)
            TcoParam.internalBinaryWrite(message.params[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tco_tmiv.Tco
 */
export const Tco = new Tco$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TcoParam$Type extends MessageType<TcoParam> {
    constructor() {
        super("tco_tmiv.TcoParam", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "integer", kind: "scalar", oneof: "value", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "double", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "bytes", kind: "scalar", oneof: "value", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<TcoParam>): TcoParam {
        const message = { name: "", value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TcoParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TcoParam): TcoParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int64 integer */ 2:
                    message.value = {
                        oneofKind: "integer",
                        integer: reader.int64().toBigInt()
                    };
                    break;
                case /* double double */ 3:
                    message.value = {
                        oneofKind: "double",
                        double: reader.double()
                    };
                    break;
                case /* bytes bytes */ 4:
                    message.value = {
                        oneofKind: "bytes",
                        bytes: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TcoParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int64 integer = 2; */
        if (message.value.oneofKind === "integer")
            writer.tag(2, WireType.Varint).int64(message.value.integer);
        /* double double = 3; */
        if (message.value.oneofKind === "double")
            writer.tag(3, WireType.Bit64).double(message.value.double);
        /* bytes bytes = 4; */
        if (message.value.oneofKind === "bytes")
            writer.tag(4, WireType.LengthDelimited).bytes(message.value.bytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tco_tmiv.TcoParam
 */
export const TcoParam = new TcoParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Tmiv$Type extends MessageType<Tmiv> {
    constructor() {
        super("tco_tmiv.Tmiv", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "plugin_received_time", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TmivField },
            { no: 4, name: "timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Tmiv>): Tmiv {
        const message = { name: "", pluginReceivedTime: 0n, fields: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Tmiv>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tmiv): Tmiv {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* uint64 plugin_received_time */ 2:
                    message.pluginReceivedTime = reader.uint64().toBigInt();
                    break;
                case /* repeated tco_tmiv.TmivField fields */ 3:
                    message.fields.push(TmivField.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.Timestamp timestamp */ 4:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Tmiv, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* uint64 plugin_received_time = 2; */
        if (message.pluginReceivedTime !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.pluginReceivedTime);
        /* repeated tco_tmiv.TmivField fields = 3; */
        for (let i = 0; i < message.fields.length; i++)
            TmivField.internalBinaryWrite(message.fields[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp timestamp = 4; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tco_tmiv.Tmiv
 */
export const Tmiv = new Tmiv$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmivField$Type extends MessageType<TmivField> {
    constructor() {
        super("tco_tmiv.TmivField", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "string", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "double", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "integer", kind: "scalar", oneof: "value", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "enum", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "bytes", kind: "scalar", oneof: "value", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<TmivField>): TmivField {
        const message = { name: "", value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TmivField>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmivField): TmivField {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string string */ 2:
                    message.value = {
                        oneofKind: "string",
                        string: reader.string()
                    };
                    break;
                case /* double double */ 3:
                    message.value = {
                        oneofKind: "double",
                        double: reader.double()
                    };
                    break;
                case /* int64 integer */ 4:
                    message.value = {
                        oneofKind: "integer",
                        integer: reader.int64().toBigInt()
                    };
                    break;
                case /* string enum */ 5:
                    message.value = {
                        oneofKind: "enum",
                        enum: reader.string()
                    };
                    break;
                case /* bytes bytes */ 6:
                    message.value = {
                        oneofKind: "bytes",
                        bytes: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmivField, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string string = 2; */
        if (message.value.oneofKind === "string")
            writer.tag(2, WireType.LengthDelimited).string(message.value.string);
        /* double double = 3; */
        if (message.value.oneofKind === "double")
            writer.tag(3, WireType.Bit64).double(message.value.double);
        /* int64 integer = 4; */
        if (message.value.oneofKind === "integer")
            writer.tag(4, WireType.Varint).int64(message.value.integer);
        /* string enum = 5; */
        if (message.value.oneofKind === "enum")
            writer.tag(5, WireType.LengthDelimited).string(message.value.enum);
        /* bytes bytes = 6; */
        if (message.value.oneofKind === "bytes")
            writer.tag(6, WireType.LengthDelimited).bytes(message.value.bytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tco_tmiv.TmivField
 */
export const TmivField = new TmivField$Type();
